import datetime
import re
from typing import Sequence

from genshin.models.genshin import Notes, Exploration, ClaimedDailyReward, PartialGenshinUserStats

from bot.utils import get_current_timestamp
from bot.src.types.genshin import Characters, ElementSymbols, Regions, Rewards


def _get_estimated_recovery_time(object_recovery_time: datetime.datetime) -> str:
    current_time = get_current_timestamp(3)

    if object_recovery_time <= current_time:
        return '0 —Å–µ–∫.'

    time = re.sub(r'\sday[s,]+\s', ':', str(object_recovery_time - current_time).split('.')[0]).split(':')
    match len(time):
        case 4:
            return '{} –¥. {} —á. {} –º–∏–Ω.'.format(*time[:-1])
        case 3:
            return '{} —á. {} –º–∏–Ω.'.format(*time[:-1])
        case 2:
            return '{} –º–∏–Ω. {} —Å–µ–∫.'.format(*time)
        case 1:
            return '{} —Å–µ–∫.'.format(*time)


def format_notes(notes: Notes) -> str:
    expeditions = []
    for e in notes.expeditions:
        expedition_status = '‚ôª' if e.status == 'Ongoing' else '‚úÖ'
        expeditions.append(
            f"{expedition_status}"
            f"{Characters[e.character.name.lower().replace(' ', '_')].value}: "
            f"üïë–û—Å—Ç–∞–ª–æ—Å—å: {_get_estimated_recovery_time(e.completion_time)}\n"
        )

    formatted_notes = (
        f"üñº–ò–≥—Ä–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:\n"
        f"üåô–°–º–æ–ª–∞: {notes.current_resin}, "
        f"üîÉ–î–æ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {_get_estimated_recovery_time(notes.resin_recovery_time)}\n"
        f"üéÅ–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–π–ª–∏–∫–∏: {notes.completed_commissions}, "
        f"‚ùì–°–æ–±—Ä–∞–Ω—ã –ª–∏ –Ω–∞–≥—Ä–∞–¥—ã: {'–î–∞' if notes.claimed_commission_reward else '–ù–µ—Ç'}\n"
        f"üíπ–°–∫–∏–¥–∫–∏ –Ω–∞ –±–æ—Å—Å–æ–≤: {notes.remaining_resin_discounts}\n"
        f"üí∞–ú–æ–Ω–µ—Ç—ã –æ–±–∏—Ç–µ–ª–∏: {notes.current_realm_currency}/{notes.max_realm_currency}, "
        f"‚åõ–î–æ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {_get_estimated_recovery_time(notes.realm_currency_recovery_time)}\n"
        f"‚ò¢–û—Ç–∫–∞—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—è: {_get_estimated_recovery_time(notes.transformer_recovery_time)}\n"
        f"üî∞–ù–∞—á–∞—Ç—ã–µ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏: {len(notes.expeditions)}\n"
    ) + ''.join(expeditions)
    return formatted_notes


def _get_formatted_exploration_rewards(exploration: Exploration, region_en: str) -> str:
    match region_en:
        case 'Enkanomiya':
            return ''
        case 'Inazuma':
            return f"–£—Ä. —Ä–µ–ø—É—Ç–∞—Ü–∏–∏: {exploration.level} ‚õ©–£—Ä. –°–∞–∫—É—Ä—ã: {exploration.offerings[0].level}"
        case 'Dragonspine':
            return f"üå≥–£—Ä. –î—Ä–µ–≤–∞: {exploration.offerings[0].level}"
        case 'Liyue':
            return f"–£—Ä. —Ä–µ–ø—É—Ç–∞—Ü–∏–∏: {exploration.level}"
        case 'Mondstadt':
            return f"–£—Ä. —Ä–µ–ø—É—Ç–∞—Ü–∏–∏: {exploration.level}"
        case 'The Chasm':
            return ''
        case 'The Chasm: Underground Mines':
            return f"üíé–£—Ä. –ê–¥—ä—é–≤–∞–Ω—Ç–∞: {exploration.offerings[0].level}"
        case _:
            print(exploration.name)
            return '–û—à–∏–±–∫–∞: —Ä–µ–≥–∏–æ–Ω –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω!'


def format_stats(stats: PartialGenshinUserStats) -> str:
    characters = []
    for c in stats.characters:
        characters.append(
            f"{c.rarity}‚≠ê "
            f"{ElementSymbols[c.element.lower()].value if c.element else 'üå†'}"
            f"{Characters[c.name.lower().replace(' ', '_')].value} "
            f"–£—Ä. {c.level} "
            f"üéÆ–£—Ä. –¥—Ä—É–∂–±—ã: {c.friendship}\n"
        )

    explorations = []
    for e in stats.explorations:
        if e.name:
            explorations.append(
                f"üåê{e.explored}% "
                f"{Regions[e.name.lower().replace(':', '').replace(' ', '_')].value} "
                f"{_get_formatted_exploration_rewards(e, e.name)}\n"
            )

    formatted_stats = (
        f"üñº–ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üèÜ–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {stats.stats.achievements}\n"
        f"‚òÄ–î–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {stats.stats.days_active}\n"
        f"üåÄ–í–∏—Ç–∞—è –±–µ–∑–¥–Ω–∞: {stats.stats.spiral_abyss}\n"
        f"üçÄ–ê–Ω–µ–º–æ–∫—É–ª—ã: {stats.stats.anemoculi}\n"
        f"üèµ–ì–µ–æ–∫—É–ª—ã: {stats.stats.geoculi}\n"
        f"üå∏–≠–ª–µ–∫—Ç—Ä–æ–∫—É–ª—ã: {stats.stats.electroculi}\n"
        f"üõ∏–¢–æ—á–∫–∏ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏: {stats.stats.unlocked_waypoints}\n"
        f"üöá–ü–æ–¥–∑–µ–º–µ–ª—å—è: {stats.stats.unlocked_domains}\n"
        f"üè°–ß–∞–π–Ω–∏–∫: –£—Ä. {stats.teapot.level} üß∏–ö–æ–º—Ñ–æ—Ä—Ç: {stats.teapot.comfort}\n\n"
        f"üß≠–°—É–Ω–¥—É–∫–∏:\n"
        f"üóù–û–±—ã—á–Ω—ã–µ —Å—É–Ω–¥—É–∫–∏: {stats.stats.common_chests}\n"
        f"üóù–ë–æ–≥–∞—Ç—ã–µ —Å—É–Ω–¥—É–∫–∏: {stats.stats.exquisite_chests}\n"
        f"üóù–î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ —Å—É–Ω–¥—É–∫–∏: {stats.stats.precious_chests}\n"
        f"üîë–†–æ—Å–∫–æ—à–Ω—ã–µ —Å—É–Ω–¥—É–∫–∏: {stats.stats.luxurious_chests}\n\n"
        f"üë•–ü–µ—Ä—Å–æ–Ω–∞–∂–∏:\n"
        f"üìù–í—Å–µ–≥–æ: {len(stats.characters)}\n"
        f"üíå–° 10 —É—Ä. –¥—Ä—É–∂–±—ã: {len([c for c in stats.characters if c.friendship == 10])}\n"
    ) + ''.join(characters) + '\nüåç–ü—Ä–æ–≥—Ä–µ—Å—Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π:\n' + ''.join(explorations)
    return formatted_stats


def _get_formatted_daily_reward_name(reward: ClaimedDailyReward) -> str:
    return Rewards[reward.name.lower().replace(' ', '_').replace("'s", "")].value


def format_daily_rewards(rewards: Sequence[ClaimedDailyReward]) -> str:
    current_month = get_current_timestamp(8).month  #: UTC+8 is login bonus offset on Europe
    current_month_rewards = [r for r in rewards if r.time.month == current_month]

    formatted_rewards = (
        f"üñº–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö –Ω–∞ —Å–∞–π—Ç–µ:\n"
        f"üèÜ–°–æ–±—Ä–∞–Ω–æ –Ω–∞–≥—Ä–∞–¥ –≤—Å–µ–≥–æ: {len(rewards)}\n"
        f"üèÖ–°–æ–±—Ä–∞–Ω–æ –Ω–∞–≥—Ä–∞–¥ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü: {len(current_month_rewards)}\n"
        f"üéñ–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–æ–±—Ä–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {_get_formatted_daily_reward_name(current_month_rewards[0])}"
    )
    return formatted_rewards
