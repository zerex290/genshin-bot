from typing import Optional, List

from ...models.honeyimpact import characters


def format_information(character: Optional[characters.Information]) -> str:
    if character is None:
        return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!'

    return (
        f"üñº–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        f"üë§–ü–µ—Ä—Å–æ–Ω–∞–∂: {character.name}\n"
        f"üëë–¢–∏—Ç—É–ª: {character.title}\n"
        f"üß∞–ì—Ä—É–ø–ø–∞: {character.occupation}\n"
        f"üåé–†–µ–≥–∏–æ–Ω: {character.association}\n"
        f"üí´–†–µ–¥–∫–æ—Å—Ç—å: {character.rarity}‚≠ê\n"
        f"‚öî–û—Ä—É–∂–∏–µ: {character.weapon}\n"
        f"‚ö±–ì–ª–∞–∑ –ë–æ–≥–∞: {character.element}\n"
        f"üìà–°—Ç–∞—Ç –≤–æ–∑–≤—ã—à–µ–Ω–∏—è: {character.ascension_stat}\n"
        f"üéâ–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {character.birthdate}\n"
        f"üîÆ–°–æ–∑–≤–µ–∑–¥–∏–µ: {character.constellation}\n"
        f"üìñ–û–ø–∏—Å–∞–Ω–∏–µ: {character.description}"
    )


def format_active_skills(
        auto_attack: Optional[characters.Skill] = None,
        elemental_skill: Optional[characters.Skill] = None,
        elemental_burst: Optional[characters.Skill] = None,
        alternative_sprint: Optional[characters.Skill] = None
) -> str:
    if not any(locals().values()):
        return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'

    formatted_active_skills = [
        '‚ôü–ê–∫—Ç–∏–≤–Ω—ã–µ –ù–∞–≤—ã–∫–∏:',
        f"‚Ä¢ –ê–≤—Ç–æ-–∞—Ç–∞–∫–∞: {auto_attack.title} -- {auto_attack.description}",
        f"‚Ä¢ –≠–ª–µ–º. –Ω–∞–≤—ã–∫: {elemental_skill.title} -- {elemental_skill.description}",
        f"‚Ä¢ –í–∑—Ä—ã–≤ —Å—Ç–∏—Ö–∏–∏: {elemental_burst.title} -- {elemental_burst.description}"
    ]
    if alternative_sprint is not None:
        formatted_active_skills.append(f"‚Ä¢ –î–æ–ø. –Ω–∞–≤—ã–∫: {alternative_sprint.title} -- {alternative_sprint.description}")
    return '\n'.join(formatted_active_skills)


def format_passive_skills(skills: List[characters.Skill]) -> str:
    if not skills:
        return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!'

    formatted_passive_skills = [f"üé≥–ü–∞—Å—Å–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:"]
    for skill in skills:
        formatted_passive_skills.append(f"‚Ä¢ {skill.title}: {skill.description}")
    return '\n'.join(formatted_passive_skills)


def format_constellations(constellations: List[characters.Skill]) -> str:
    if not constellations:
        return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!'

    formatted_constellations = [f"üéÜ–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–≤–µ–∑–¥–∏–π:"]
    indexes = ['‚ù∂', '‚ù∑', '‚ù∏', '‚ùπ', '‚ù∫', '‚ùª']
    for i, constellation in enumerate(constellations):
        formatted_constellations.append(f"{indexes[i]} {constellation.title}: {constellation.description}")
    return '\n'.join(formatted_constellations)
