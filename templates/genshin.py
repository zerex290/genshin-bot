"""Service use only"""


import datetime

from constants import Genshin


class HoYoLAB:
    @staticmethod
    def notes(n: dict) -> str:
        def title():
            return 'üñº–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:'

        def resin():
            response = (
                f"üåô–°–º–æ–ª–∞: {n['resin']}, üîÉ–î–æ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏—è: "
                f"{int(n['until_resin_limit']) // 3600} —á. {int(n['until_resin_limit']) % 3600 // 60} –º–∏–Ω."
            )
            return response

        def dailies():
            response = (
                f"üéÅ–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–π–ª–∏–∫–∏: {n['completed_commissions']}, "
                f"‚ùì–°–æ–±—Ä–∞–Ω—ã –ª–∏ –Ω–∞–≥—Ä–∞–¥—ã: {'–î–∞' if n['claimed_commission_reward'] else '–ù–µ—Ç'}"
            )
            return response

        def discounts():
            return f"üíπ–°–∫–∏–¥–∫–∏ –Ω–∞ –±–æ—Å—Å–æ–≤: {n['remaining_boss_discounts']}"

        def expeditions():
            prettified = [f"üî∞–ù–∞—á–∞—Ç—ã–µ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏: {len(n['expeditions'])}\n"]

            for expedition in n['expeditions']:
                prettified.append(
                    f"üë§–ü–µ—Ä—Å–æ–Ω–∞–∂: {Genshin.CHARACTER[expedition['icon'].split('_')[-1][:-4]]}, "
                    f"üïë–û—Å—Ç–∞–ª–æ—Å—å: {int(expedition['remaining_time']) // 3600} —á. "
                    f"{int(expedition['remaining_time']) % 3600 // 60} –º–∏–Ω.\n"
                )
            return ''.join(prettified)
        return '\n'.join([title(), resin(), dailies(), discounts(), expeditions()])

    @staticmethod
    def rewards(r: list) -> dict:
        def title():
            return 'üñº–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö –Ω–∞ —Å–∞–π—Ç–µ:'

        def monthly_rewards():
            current_month = str(datetime.datetime.now()).split('-')[1]
            monthly = [reward for reward in r[0] if reward['created_at'].split('-')[1] == current_month]
            summary = (
                f"üèÖ–°–æ–±—Ä–∞–Ω–æ –Ω–∞–≥—Ä–∞–¥ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü: {len(monthly)}\n"
                f"‚ùì–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: "
                f"{'—É–∂–µ –±—ã–ª–∞ —Å–æ–±—Ä–∞–Ω–∞...' if r[1] is None else '—É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–∞!'}\n"
                f"üéñ–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–æ–±—Ä–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {monthly[0]['name']}\n", monthly[0]['img']
            )
            return summary

        rewards, icon = monthly_rewards()
        return {'title': title(), 'rewards': rewards, 'icon_link': icon}

    @staticmethod
    def stats(s: dict) -> str:
        def title():
            return 'üñº–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:'

        def achievements():
            return f"üèÜ–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {s['stats']['achievements']}"

        def active_days():
            return f"‚òÄ–î–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {s['stats']['active_days']}"

        def abyss():
            return f"üåÄ–í–∏—Ç–∞—è –±–µ–∑–¥–Ω–∞: {s['stats']['spiral_abyss']}"

        def anemoculi():
            return f"üçÄ–ê–Ω–µ–º–æ–∫—É–ª—ã: {s['stats']['anemoculi']}"

        def geoculi():
            return f"üèµ–ì–µ–æ–∫—É–ª—ã: {s['stats']['geoculi']}"

        def electroculi():
            return f"üå∏–≠–ª–µ–∫—Ç—Ä–æ–∫—É–ª—ã: {s['stats']['electroculi']}"

        def chests():
            response_ = (
                f"üóù–û–±—ã—á–Ω—ã–µ —Å—É–Ω–¥—É–∫–∏: {s['stats']['common_chests']}\n"
                f"üóù–ë–æ–≥–∞—Ç—ã–µ —Å—É–Ω–¥—É–∫–∏: {s['stats']['exquisite_chests']}\n"
                f"üóù–î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ —Å—É–Ω–¥—É–∫–∏: {s['stats']['precious_chests']}\n"
                f"üîë–†–æ—Å–∫–æ—à–Ω—ã–µ —Å—É–Ω–¥—É–∫–∏: {s['stats']['luxurious_chests']}"
            )
            return response_

        def waypoints():
            return f"üõ∏–¢–æ—á–∫–∏ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏: {s['stats']['unlocked_waypoints']}"

        def domains():
            return f"üöá–ü–æ–¥–∑–µ–º–µ–ª—å—è: {s['stats']['unlocked_domains']}"

        def teapot():
            if s.get('teapot'):
                return f"üè°–ß–∞–π–Ω–∏–∫: –£—Ä. {s['teapot']['level']} üß∏–ö–æ–º—Ñ–æ—Ä—Ç: {s['teapot']['comfort']}"
            else:
                return 'üè°–ß–∞–π–Ω–∏–∫: –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã—Ç!'

        def characters():
            friendship = [ch['friendship'] for ch in s['characters'] if ch['friendship'] == 10]
            response_ = [
                'üë•–ü–µ—Ä—Å–æ–Ω–∞–∂–∏:', f"üìù–≤—Å–µ–≥–æ -- {s['stats']['characters']}", f"üíå—Å 10 —É—Ä. –¥—Ä—É–∂–±—ã -- {len(friendship)}"
            ]

            for i, character in enumerate(s['characters']):
                response_.append(
                    f"{s['characters'][i]['rarity']}‚≠ê "
                    f"{Genshin.ELEMENT[s['characters'][i]['element']]['symbol']}"
                    f"{s['characters'][i]['name']} "
                    f"–£—Ä. {s['characters'][i]['level']} "
                    f"üéÆ–£—Ä. –¥—Ä—É–∂–±—ã: {s['characters'][i]['friendship']}"
                )
            return '\n'.join(response_)

        def explorations():
            """I have to do that shitty 2-lined lambda templates, cuz i don't know how to solve it better"""
            regions = {
                '–ò–Ω–∞–¥–∑—É–º–∞': lambda r: f"–£—Ä. —Ä–µ–ø—É—Ç–∞—Ü–∏–∏: {s['explorations'][r]['level']}\n"
                                      f"‚õ©–ë–ª–∞–≥–æ—Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –°–∞–∫—É—Ä—ã: –£—Ä. {s['explorations'][r]['offerings'][0]['level']}",
                '–î—Ä–∞–∫–æ–Ω–∏–π —Ö—Ä–µ–±–µ—Ç': lambda r: f"üå≥–î—Ä–µ–≤–æ –≤–µ—á–Ω–æ–π –º–µ—Ä–∑–ª–æ—Ç—ã: "
                                             f"–£—Ä. {s['explorations'][r]['offerings'][0]['level']}",
                '–õ–∏ –Æ—ç': lambda r: f"–£—Ä. —Ä–µ–ø—É—Ç–∞—Ü–∏–∏:  {s['explorations'][r]['level']}",
                '–ú–æ–Ω–¥—à—Ç–∞–¥—Ç': lambda r: f"–£—Ä. —Ä–µ–ø—É—Ç–∞—Ü–∏–∏:  {s['explorations'][r]['level']}",
                '–≠–Ω–∫–∞–Ω–æ–º–∏—è': lambda r: f"",
                '': lambda r: f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω: –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è..."
            }
            response_ = []

            for i, exploration in enumerate(s['explorations']):
                r_name = s['explorations'][i]['name']
                response_.append(
                    f"üåê{r_name} üß©–ü—Ä–æ–≥—Ä–µ—Å—Å: {s['explorations'][i]['explored']}% "
                    f"{regions.get(r_name, lambda r: f'–û—à–∏–±–∫–∞ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {r}')(i)}"
                )
            return '\n'.join(response_)

        response = '\n'.join(
            [title(), achievements(), active_days(), abyss(), anemoculi(), geoculi(),
             electroculi(), chests(), waypoints(), domains(), teapot(), characters(), explorations()]
        )
        return response


class Database:
    @staticmethod
    def character(user_id: int, name: str, filter_: str) -> dict:
        response = {
            'main': {
                'label': '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'color': 'secondary',
                'payload': {'user_id': user_id, 'type': 'character',
                            'filter': filter_, 'name': name, 'data': 'main'}
            },
            'skills': {
                'label': '–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏', 'color': 'secondary',
                'payload': {'user_id': user_id, 'type': 'character',
                            'filter': filter_, 'name': name, 'data': 'skills'}
            },
            'passives': {
                'label': '–ü–∞—Å—Å–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏', 'color': 'secondary',
                'payload': {'user_id': user_id, 'type': 'character',
                            'filter': filter_, 'name': name, 'data': 'passives'}
            },
            'constellations': {
                'label': '–°–æ–∑–≤–µ–∑–¥–∏—è', 'color': 'secondary',
                'payload': {'user_id': user_id, 'type': 'character',
                            'filter': filter_, 'name': name, 'data': 'constellations'}
            }
        }
        return response

    @staticmethod
    def weapon(user_id: int, name: str, filter_: str) -> dict:
        response = {
            'main': {
                'label': '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'color': 'secondary',
                'payload': {'user_id': user_id, 'type': 'weapon',
                            'filter': filter_, 'name': name, 'data': 'main'}
            },
            'ability': {
                'label': '–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ—Ä—É–∂–∏—è', 'color': 'secondary',
                'payload': {'user_id': user_id, 'type': 'weapon',
                            'filter': filter_, 'name': name, 'data': 'ability'}
            },
            'progression': {
                'label': '–ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –æ—Ä—É–∂–∏—è', 'color': 'secondary',
                'payload': {'user_id': user_id, 'type': 'weapon',
                            'filter': filter_, 'name': name, 'data': 'progression'}
            },
            'story': {
                'label': '–ò—Å—Ç–æ—Ä–∏—è –æ—Ä—É–∂–∏—è', 'color': 'secondary',
                'payload': {'user_id': user_id, 'type': 'weapon',
                            'filter': filter_, 'name': name, 'data': 'story'}
            }
        }
        return response

    @staticmethod
    def enemy(user_id: int, name: str, filter_: str) -> dict:
        response = {
            'main': {
                'label': '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'color': 'secondary',
                'payload': {'user_id': user_id, 'type': 'enemie',
                            'filter': filter_, 'name': name, 'data': 'main'}
            },
            'progression': {
                'label': '–ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞', 'color': 'secondary',
                'payload': {'user_id': user_id, 'type': 'enemie',
                            'filter': filter_, 'name': name, 'data': 'progression'}
            }
        }
        return response
